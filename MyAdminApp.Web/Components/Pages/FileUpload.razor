@page "/file-upload"
@using MyAdminApp.Web.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject BlobStorageService BlobStorageService
@inject ILogger<FileUpload> Logger
@rendermode InteractiveServer

<PageTitle>Files Upload</PageTitle>

<h1>Upload Files to Azure Blob Storage</h1>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h3>Upload New File</h3>
            </div>
            <div class="card-body">
                <p>Select a file to upload to Azure Blob Storage:</p>

                <div class="mb-3">
                    <InputFile OnChange="LoadFiles" multiple class="form-control" />
                </div>

                @if (isUploading)
                {
                    <div class="alert alert-info">
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        Uploading file(s)...
                    </div>
                }

                @if (!string.IsNullOrEmpty(uploadResult))
                {
                    <div class="alert @(uploadSuccess ? "alert-success" : "alert-danger")">
                        @uploadResult
                    </div>
                }

                @if (selectedFiles.Count > 0)
                {
                    <h4>Selected Files:</h4>
                    <ul class="list-group">
                        @foreach (var file in selectedFiles)
                        {
                            <li class="list-group-item">
                                @file.Name (@(file.Size / 1024.0).ToString("F2") KB)
                            </li>
                        }
                    </ul>
                    <div class="mt-3">
                        <button class="btn btn-primary" @onclick="UploadFiles" disabled="@isUploading">
                            Upload @(selectedFiles.Count) File(s)
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">  
        <div class="card">
            <div class="card-header">
                <h3>Uploaded Files</h3>
            </div>
            <div class="card-body">
                <button class="btn btn-sm btn-secondary" @onclick="RefreshFileList">Refresh</button>
                <hr/>
                @if (isLoading)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else if (uploadedFiles.Count == 0)
                {
                    <div class="alert alert-info">No files uploaded yet.</div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                            <tr>
                                <th>Name</th>
                                <th>Size</th>
                                <th>Last Modified</th>
                                <th>Actions</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var file in uploadedFiles)
                            {
                                <tr>
                                    <td>
                                        <a href="@file.Uri" target="_blank">@file.Name</a>
                                    </td>
                                    <td>@FormatFileSize(file.Size)</td>
                                    <td>@file.LastModified.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                    <td>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteFile(file.Name)">
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<IBrowserFile> selectedFiles = new();
    private List<BlobItemInfo> uploadedFiles = new();
    private bool isUploading = false;
    private bool isLoading = false;
    private string uploadResult = "";
    private bool uploadSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUploadedFiles();
    }

    private async Task LoadUploadedFiles()
    {
        try
        {
            isLoading = true;
            uploadedFiles = await BlobStorageService.ListFilesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading uploaded files");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async Task LoadFiles(InputFileChangeEventArgs e)
    {
        selectedFiles.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            selectedFiles.Add(file);
        }

        // Clear previous results
        uploadResult = "";
    }

    private async Task UploadFiles()
    {
        if (selectedFiles.Count == 0) return;

        uploadSuccess = true;
        isUploading = true;
        uploadResult = "";

        try
        {
            var tasks = new List<Task<string?>>();
            foreach (var file in selectedFiles)
            {
                tasks.Add(BlobStorageService.UploadFileAsync(file));
            }

            var results = await Task.WhenAll(tasks);
            var failedUploads = results.Count(r => r == null);

            if (failedUploads == 0)
            {
                uploadResult = $"Successfully uploaded {selectedFiles.Count} file(s).";
                selectedFiles.Clear();
                await LoadUploadedFiles();
            }
            else
            {
                uploadSuccess = false;
                uploadResult = $"Error: {failedUploads} of {selectedFiles.Count} files failed to upload.";
            }
        }
        catch (Exception ex)
        {
            uploadSuccess = false;
            uploadResult = $"Error uploading files: {ex.Message}";
            Logger.LogError(ex, "Error uploading files");
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task RefreshFileList()
    {
        await LoadUploadedFiles();
    }

    private async Task DeleteFile(string fileName)
    {
        if (await BlobStorageService.DeleteFileAsync(fileName))
        {
            await LoadUploadedFiles();
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] suffixes = { "B", "KB", "MB", "GB", "TB" };
        int counter = 0;
        decimal number = bytes;
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        return $"{number:n1} {suffixes[counter]}";
    }
}